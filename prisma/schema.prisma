generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  userId              String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role_id             Int
  courses             Course[]
  purchases           Purchase[]
  stripe              StripeCustomer?
  role                Role                 @relation(fields: [role_id], references: [id], onDelete: Cascade)
  progress            UserProgress[]
  MercadoPagoCustomer MercadoPagoCustomer?
}

model Role {
  nombre_rol String @unique
  id         Int    @id @default(2)
  users      User[]
}

model Course {
  id          String     @id @default(uuid())
  userId      String
  title       String
  slug        String     @unique
  description String?
  imageUrl    String?
  price       String?
  isPublished Boolean    @default(false)
  level       String?
  category    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  chapters    Chapter[]
  user        User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  purchases   Purchase[]
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  duration     Float          @default(0)
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User     @relation(fields: [userId], references: [userId])
}

model MercadoPagoCustomer {
  id                    String   @id @default(uuid())
  userId                String   @unique
  mercadoPagoCustomerId String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  User                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
